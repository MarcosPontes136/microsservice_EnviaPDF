package com.microsservice_enviarPDF.controller;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNotNull;
import static org.mockito.Mockito.when;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.core.io.Resource;
import org.springframework.core.io.ResourceLoader;
import org.springframework.http.ResponseEntity;

public class PdfControllerTest {

    @Mock
    private ResourceLoader resourceLoader;

    @Mock
    private Resource resource;

    @InjectMocks
    private PdfController pdfController;

    @BeforeEach
    public void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testGetPdfFromTxt_Success() throws Exception {
        String base64Content = ""; // Coloque aqui um conteúdo base64 válido de um PDF

        InputStream inputStream = new ByteArrayInputStream(base64Content.getBytes(StandardCharsets.UTF_8));

        when(resourceLoader.getResource("classpath:arquivoPDF/MarcosPAlbuquerque.txt")).thenReturn(resource);
        when(resource.getInputStream()).thenReturn(inputStream);

        ResponseEntity<byte[]> response = pdfController.getPdfFromTxt();
        
        assertEquals(200, response.getStatusCodeValue());
        assertNotNull(response.getBody());

        byte[] expectedPdfBytes = Base64.getDecoder().decode(base64Content);
        assertEquals(expectedPdfBytes.length, response.getBody().length);
    }

    @Test
    public void testGetPdfFromTxt_FileNotFound() throws Exception {
        when(resourceLoader.getResource("classpath:arquivoPDF/MarcosPAlbuquerque.txt")).thenReturn(resource);
        when(resource.getInputStream()).thenThrow(new IOException("Arquivo não encontrado"));
        
        ResponseEntity<byte[]> response = pdfController.getPdfFromTxt();

        assertEquals(400, response.getStatusCodeValue());
    }
}
